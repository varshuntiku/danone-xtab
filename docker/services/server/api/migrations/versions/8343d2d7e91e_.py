"""empty message

Revision ID: 8343d2d7e91e
Revises: 8343d2d7e91d
Create Date: 2020-06-10 15:22:10.810085

"""
from alembic import op
import sqlalchemy as sa
import json

# revision identifiers, used by Alembic.
revision = "8343d2d7e91e"
down_revision = "8343d2d7e91d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    projects = conn.execute("SELECT id, blueprint FROM project").fetchall()

    print("CODEX >>> PROJECTS | Migrating widget types to the widget factory")

    project_updates = 0
    total_projects = 0

    # print(f"project_id,widget_id,widget_name,base_widget_type,base_widget_name,exact_base_widget_id,similar_left_base_widget_id,similar_right_base_widget_id,exact_widget_id,similar_left_widget_id,similar_right_widget_id")
    for project in projects:
        if project.blueprint:
            blueprint_data = json.loads(project.blueprint)

            if len(blueprint_data["nodes"]) > 0:
                for widget in blueprint_data["nodes"]:
                    # print(f"\"{widget['id']}\",\"{project.id}\",\"{widget['name']}\",\"{widget['extras']['widget_type']}\",\"{widget['extras']['widget_name']}\",", end="")
                    # widget_name_id = ""
                    if "widget_id" not in widget["extras"]:
                        widget["extras"]["widget_id"] = ""
                    elif not widget["extras"]["widget_id"]:
                        widget["extras"]["widget_id"] = ""

                    # Update widget_group_id from the text to the id.
                    if widget["extras"]["widget_type"] == "FACTORS":
                        widget["extras"]["widget_type"] = 1
                    elif widget["extras"]["widget_type"] == "INGEST":
                        widget["extras"]["widget_type"] = 2
                    elif widget["extras"]["widget_type"] == "AGGREGATE":
                        widget["extras"]["widget_type"] = 3
                    elif widget["extras"]["widget_type"] == "EXPLORE":
                        widget["extras"]["widget_type"] = 4
                    elif widget["extras"]["widget_type"] == "TRANSFORM":
                        widget["extras"]["widget_type"] = 5
                    elif widget["extras"]["widget_type"] == "MODEL":
                        widget["extras"]["widget_type"] = 6
                    elif widget["extras"]["widget_type"] == "PREDICT":
                        widget["extras"]["widget_type"] = 8
                    elif widget["extras"]["widget_type"] == "DEMOCRATIZE":
                        widget["extras"]["widget_type"] = 9

                    # Replacing the ' - Copy' string from the base_widget_names
                    widget["extras"]["widget_name"] = (
                        widget["extras"]["widget_name"].replace(" - Copy", "").strip()
                    )
                    widget["name"] = widget["name"].strip()

                    # Adding base_widget_id from the widget-factory
                    try:
                        widget_group_id = int(widget["extras"]["widget_type"])
                        base_widget_name_comp = widget["extras"]["widget_name"]
                        widget_name_comp = widget["name"].replace(" - Copy", "")

                        if type(widget_group_id) == int or widget_group_id.is_integer():
                            # EXACT MATCH with base_widget_name
                            base_widget_query = "SELECT id, name FROM widget WHERE group_id = :widget_group_id AND name ILIKE :widget_name_comp"
                            base_widget = conn.execute(
                                sa.sql.text(base_widget_query),
                                widget_group_id=widget_group_id,
                                widget_name_comp=base_widget_name_comp,
                            ).fetchall()

                            if len(base_widget) > 0:
                                widget["extras"]["widget_id"] = base_widget[0].id
                                # print(f"\"{widget['extras']['widget_id']}\",\"\",\"\",", end="")
                            else:
                                # SIMILAR left with base_widget_name
                                base_widget_query = "SELECT id, name FROM widget WHERE group_id = :widget_group_id AND name ILIKE :widget_name_comp"
                                base_widget = conn.execute(
                                    sa.sql.text(base_widget_query),
                                    widget_group_id=widget_group_id,
                                    widget_name_comp=f"%%{base_widget_name_comp}%%",
                                ).fetchall()

                                if len(base_widget) > 0:
                                    widget["extras"]["widget_id"] = base_widget[0].id
                                    # print(f"\"\",\"{widget['extras']['widget_id']}\",\"\",", end="")
                                else:
                                    # SIMILAR right with base_widget_name
                                    base_widget_query = "SELECT id, name FROM widget WHERE group_id = :widget_group_id AND :widget_name_comp ILIKE '%%' || name || '%%'"
                                    base_widget = conn.execute(
                                        sa.sql.text(base_widget_query),
                                        widget_group_id=widget_group_id,
                                        widget_name_comp=base_widget_name_comp,
                                    ).fetchall()

                                    if len(base_widget) > 0:
                                        widget["extras"]["widget_id"] = base_widget[
                                            0
                                        ].id
                                    #     print(f"\"\",\"\",\"{widget['extras']['widget_id']}\",", end="")
                                    # else:
                                    #     print(f"\"\",\"\",\"\",", end="")

                            # EXACT MATCH with widget_name
                            base_widget_query_by_name = "SELECT id, name FROM widget WHERE group_id = :widget_group_id AND name ILIKE :widget_name_comp"
                            base_widget_by_name = conn.execute(
                                sa.sql.text(base_widget_query_by_name),
                                widget_group_id=widget_group_id,
                                widget_name_comp=widget_name_comp,
                            ).fetchall()

                            if len(base_widget_by_name) > 0:
                                widget["extras"]["widget_id"] = base_widget_by_name[
                                    0
                                ].id
                                # print(f"\"{widget['extras']['widget_id']}\",\"\",\"\"", end="")
                            else:
                                # SIMILAR left with widget_name
                                base_widget_query_by_name = "SELECT id, name FROM widget WHERE group_id = :widget_group_id AND name ILIKE :widget_name_comp"
                                base_widget_by_name = conn.execute(
                                    sa.sql.text(base_widget_query_by_name),
                                    widget_group_id=widget_group_id,
                                    widget_name_comp=f"%%{widget_name_comp}%%",
                                ).fetchall()

                                if len(base_widget_by_name) > 0:
                                    widget["extras"]["widget_id"] = base_widget_by_name[
                                        0
                                    ].id
                                    # print(f"\"\",\"{widget['extras']['widget_id']}\",\"\"", end="")
                                else:
                                    # SIMILAR right with widget_name
                                    base_widget_query_by_name = "SELECT id, name FROM widget WHERE group_id = :widget_group_id AND :widget_name_comp ILIKE '%%' || name || '%%'"
                                    base_widget_by_name = conn.execute(
                                        sa.sql.text(base_widget_query_by_name),
                                        widget_group_id=widget_group_id,
                                        widget_name_comp=widget_name_comp,
                                    ).fetchall()

                                    if len(base_widget_by_name) > 0:
                                        widget["extras"][
                                            "widget_id"
                                        ] = base_widget_by_name[0].id
                                        # print(f"\"\",\"\",\"{widget['extras']['widget_id']}\"", end="")
                                    # else:
                                    #     print(f"\"\",\"\",\"\"", end="")

                    except Exception as error_msg:
                        if not widget["extras"]["widget_type"] == "CONTAINER":
                            print(f">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>{str(error_msg)}")

                    # print("")

                conn.execute(
                    sa.sql.text(
                        "UPDATE project SET blueprint = :blueprint_json WHERE id = :project_id"
                    ),
                    blueprint_json=json.dumps(blueprint_data),
                    project_id=project.id,
                )
                project_updates += 1

        print(".", end="")
        total_projects += 1

    print("")
    print(
        f"CODEX >>> PROJECTS | Migrating widget types to the widget factory >> Total projects: {total_projects} >> Updated projects: {project_updates}"
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_column('project', 'industry')
    pass
    # ### end Alembic commands ###

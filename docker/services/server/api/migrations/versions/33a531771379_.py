"""empty message

Revision ID: 33a531771379
Revises: d8ecc0fc5e37
Create Date: 2020-08-16 11:04:56.605768

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "33a531771379"
down_revision = "d8ecc0fc5e37"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("experiment_execution")
    op.drop_table("experiment")
    op.drop_table("pipeline_execution")
    op.drop_table("pipeline")
    op.drop_table("dashboard_widget")
    op.drop_table("feature")
    op.drop_constraint("data_set_task_execution_id_fkey", "data_set")
    op.drop_table("task_execution")
    op.drop_table("task")
    op.drop_table("feature_store")
    op.drop_table("data_set")
    op.drop_table("data_source")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "feature",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("data_set_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("feature_store_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="feature_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["data_set_id"], ["data_set.id"], name="feature_data_set_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="feature_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["feature_store_id"],
            ["feature_store.id"],
            name="feature_feature_store_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="feature_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="feature_pkey"),
    )
    op.create_table(
        "experiment_execution",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("experiment_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("status", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "execution_data",
            sa.VARCHAR(length=1000000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "logs", sa.VARCHAR(length=100000), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="experiment_execution_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="experiment_execution_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiment.id"],
            name="experiment_execution_experiment_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="experiment_execution_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="experiment_execution_pkey"),
    )
    op.create_table(
        "feature_store",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('feature_store_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("data_set_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "stored_features",
            sa.VARCHAR(length=10000),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="feature_store_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["data_set_id"], ["data_set.id"], name="feature_store_data_set_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="feature_store_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="feature_store_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="feature_store_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "pipeline",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('pipeline_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "schedule_info",
            sa.VARCHAR(length=10000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "steps", sa.VARCHAR(length=10000), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="pipeline_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="pipeline_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="pipeline_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="pipeline_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "task",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('task_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("task_type_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "task_script", sa.VARCHAR(length=100000), autoincrement=False, nullable=True
        ),
        sa.Column("is_tested", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "tested_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "test_logs", sa.VARCHAR(length=10000), autoincrement=False, nullable=True
        ),
        sa.Column(
            "mlflow_run_uuid",
            sa.VARCHAR(length=10000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("data_set_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("data_source_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "model_train_task_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "dep_column", sa.VARCHAR(length=1000), autoincrement=False, nullable=True
        ),
        sa.Column(
            "task_params", sa.VARCHAR(length=10000), autoincrement=False, nullable=True
        ),
        sa.Column("feature_store_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "data_dashboard_params",
            sa.VARCHAR(length=10000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "data_dashboard_saved_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="task_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["data_set_id"], ["data_set.id"], name="task_data_set_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["data_source_id"], ["data_source.id"], name="task_data_source_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="task_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["feature_store_id"],
            ["feature_store.id"],
            name="task_feature_store_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["model_train_task_id"], ["task.id"], name="task_model_train_task_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name="task_project_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="task_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="task_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "data_set",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('data_set_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("total_rows", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "task_execution_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="data_set_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="data_set_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["task_execution_id"],
            ["task_execution.id"],
            name="data_set_task_execution_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="data_set_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="data_set_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "dashboard_widget",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "task_execution_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "widget_type", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "widget_params",
            sa.VARCHAR(length=10000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("widget_data", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="dashboard_widget_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="dashboard_widget_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["task_execution_id"],
            ["task_execution.id"],
            name="dashboard_widget_task_execution_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="dashboard_widget_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="dashboard_widget_pkey"),
    )
    op.create_table(
        "data_source",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('data_source_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "db_name", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column("datasource_type", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "connection_uri",
            sa.VARCHAR(length=1000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("status", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "tested_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "test_logs", sa.VARCHAR(length=10000), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "datasource_subtype",
            sa.VARCHAR(length=500),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="data_source_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="data_source_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="data_source_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="data_source_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "task_execution",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('task_execution_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("status", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "logs", sa.VARCHAR(length=100000), autoincrement=False, nullable=True
        ),
        sa.Column(
            "mlflow_run_uuid",
            sa.VARCHAR(length=10000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("task_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "task_execution_data",
            sa.VARCHAR(length=1000000),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="task_execution_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="task_execution_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["task_id"], ["task.id"], name="task_execution_task_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="task_execution_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="task_execution_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "experiment",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "details", sa.VARCHAR(length=100000), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("dataset_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="experiment_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"], ["data_set.id"], name="experiment_dataset_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="experiment_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="experiment_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="experiment_pkey"),
    )
    op.create_table(
        "pipeline_execution",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("pipeline_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("status", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="pipeline_execution_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="pipeline_execution_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["pipeline_id"], ["pipeline.id"], name="pipeline_execution_pipeline_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="pipeline_execution_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="pipeline_execution_pkey"),
    )
    # ### end Alembic commands ###

"""empty message

Revision ID: a11cd47d64ca
Revises: a11cd47d64c9
Create Date: 2020-07-15 06:26:45.762579

"""
from alembic import op
import sqlalchemy as sa
import json


# revision identifiers, used by Alembic.
revision = "a11cd47d64ca"
down_revision = "a11cd47d64c9"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    conn = op.get_bind()
    projects = conn.execute("SELECT id, blueprint FROM project").fetchall()

    print("CODEX >>> PROJECTS | Migrating widget types from CONTAINER to CUSTOM")

    project_updates = 0
    total_projects = 0

    # print(f"project_id,widget_id,widget_name,base_widget_type,base_widget_name,exact_base_widget_id,similar_left_base_widget_id,similar_right_base_widget_id,exact_widget_id,similar_left_widget_id,similar_right_widget_id")
    for project in projects:
        if project.blueprint:
            blueprint_data = json.loads(project.blueprint)

            if len(blueprint_data["nodes"]) > 0:
                for widget in blueprint_data["nodes"]:
                    # print(f"\"{widget['id']}\",\"{project.id}\",\"{widget['name']}\",\"{widget['extras']['widget_type']}\",\"{widget['extras']['widget_name']}\",", end="")
                    if widget["extras"]["widget_type"] == "CONTAINER":
                        widget["extras"]["widget_type"] = "CUSTOM"
                        widget["extras"]["widget_id"] = "CONTAINER"

                conn.execute(
                    sa.sql.text(
                        "UPDATE project SET blueprint = :blueprint_json WHERE id = :project_id"
                    ),
                    blueprint_json=json.dumps(blueprint_data),
                    project_id=project.id,
                )
                project_updates += 1

        print(".", end="")
        total_projects += 1

    print("")
    print(
        f"CODEX >>> PROJECTS | Migrating widget types to the widget factory >> Total projects: {total_projects} >> Updated projects: {project_updates}"
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    pass

    # ### end Alembic commands ###

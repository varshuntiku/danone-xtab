"""empty message

Revision ID: 5f346e225b32
Revises: 3df3a5a538a0
Create Date: 2020-06-06 19:48:39.852202

"""
from alembic import op
import sqlalchemy as sa
import json


# revision identifiers, used by Alembic.
revision = "5f346e225b32"
down_revision = "3df3a5a538a0"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project_attachment",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("blob_name", sa.Text(), nullable=True),
        sa.Column("file_name", sa.Text(), nullable=True),
        sa.Column("file_header", sa.Text(), nullable=True),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("widget_id", sa.String(length=100), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    conn = op.get_bind()
    projects = conn.execute("SELECT id, artifact_metadata FROM project").fetchall()

    print("CODEX >>> PROJECTS | Migrating attachments", end="")

    attachment_count = 0

    for project in projects:
        if project.artifact_metadata is not None:
            attachments = json.loads(project.artifact_metadata)
            for attachment_conn in attachments:
                data_files = attachments[attachment_conn]
                for data_file in data_files:
                    op.execute(
                        f"INSERT INTO project_attachment (blob_name, file_header, project_id, widget_id) VALUES ('{data_file['blob_name']}', '{data_file['header']}', '{project.id}', '{attachment_conn}')"
                    )
                    attachment_count = attachment_count + 1
                    print(".", end="")

    print("")
    print(
        f"CODEX >>> PROJECTS | Finished migrating attachments: {str(attachment_count)}"
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("project_attachment")
    # ### end Alembic commands ###

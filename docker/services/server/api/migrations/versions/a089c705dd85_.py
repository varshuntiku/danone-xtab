"""empty message

Revision ID: a089c705dd85
Revises: a00b8a645d5f
Create Date: 2020-10-26 20:46:58.854533

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "a089c705dd85"
down_revision = "a00b8a645d5f"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project_assignee_identifier",
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
    )
    op.drop_table("project_assignee")

    conn = op.get_bind()
    projects = conn.execute("SELECT id, assignee FROM project").fetchall()

    print("CODEX >>> PROJECTS | Migrating assignee", end="")

    project_count = 0

    for project in projects:
        if project.assignee is not None:
            op.execute(
                f"INSERT INTO project_assignee_identifier (project_id, user_id) VALUES ('{project.id}', '{project.assignee}')"
            )
            project_count += 1

    print("")
    print(f"CODEX >>> PROJECTS | Finished migrating assignees: {str(project_count)}")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project_assignee",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("assignee", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["assignee"], ["user.id"], name="project_assignee_assignee_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name="project_assignee_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"], ["user.id"], name="project_assignee_deleted_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name="project_assignee_project_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name="project_assignee_updated_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="project_assignee_pkey"),
    )
    op.drop_table("project_assignee_identifier")
    # ### end Alembic commands ###

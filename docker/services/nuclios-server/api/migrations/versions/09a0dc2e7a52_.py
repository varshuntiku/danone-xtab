"""Add DEE integration related tables

Revision ID: 09a0dc2e7a52
Revises: d3182a511ca3
Create Date: 2024-10-17 23:08:19.516631

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "09a0dc2e7a52"
down_revision: Union[str, None] = "d3182a511ca3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "copilot_tool_base_version",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("desc", sa.Text(), nullable=True),
        sa.Column("config", sa.JSON(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "copilot_tool_deployment_agent",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("desc", sa.Text(), nullable=True),
        sa.Column("config", sa.JSON(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "copilot_tool_deployment_agent_base_version_mapping",
        sa.Column("deployment_agent_id", sa.Integer(), nullable=True),
        sa.Column("base_version_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["base_version_id"],
            ["copilot_tool_base_version.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deployment_agent_id"],
            ["copilot_tool_deployment_agent.id"],
        ),
    )
    op.add_column("copilot_tool_version", sa.Column("base_version_id", sa.Integer(), nullable=True))
    op.create_foreign_key(
        "copilot_tool_version_base_version_id_fkey",
        "copilot_tool_version",
        "copilot_tool_base_version",
        ["base_version_id"],
        ["id"],
    )
    op.add_column(
        "copilot_tool_version_registry_mapping", sa.Column("deployment_agent_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(
        "copilot_tool_version_registry_mapping_deployment_agent_id_fkey",
        "copilot_tool_version_registry_mapping",
        "copilot_tool_deployment_agent",
        ["deployment_agent_id"],
        ["id"],
    )
    op.drop_column("copilot_tool_version_registry_mapping", "deployment_agent")

    op.execute(
        """INSERT INTO copilot_tool_base_version (name, "desc", config, created_by, created_at) VALUES
        ('v1','Needs explicit listener or serve. Rigid in terms of the structure of the codebase.','{"path": "/default_tool"}',0, NOW());"""
    )
    op.execute(
        """INSERT INTO public.copilot_tool_base_version (name, "desc", config, created_by, created_at) VALUES
        ('v2','It has a Dockerfile with it. Flexible in terms of the structure of the codebase.','{"path": "/default_tool_v2"}',0, NOW());"""
    )

    op.execute(
        """INSERT INTO public.copilot_tool_deployment_agent (name, "desc", config, created_by, created_at) VALUES
        ('fission','An open-source deployment agent for serverless functions.',NULL,0, NOW());"""
    )
    op.execute(
        """INSERT INTO public.copilot_tool_deployment_agent (name, "desc", config, created_by, created_at) VALUES
        ('dee','Nuclios Dynamic Execution Environment. A custom-built deployment agent was developed and maintained by the Nuclios team.',NULL,0, NOW());"""
    )

    op.execute(
        """INSERT INTO public.copilot_tool_deployment_agent_base_version_mapping (deployment_agent_id, base_version_id) VALUES
        ( (SELECT id FROM copilot_tool_deployment_agent WHERE name = 'fission'),
        (SELECT id FROM copilot_tool_base_version WHERE name = 'v1'));"""
    )
    op.execute(
        """INSERT INTO public.copilot_tool_deployment_agent_base_version_mapping (deployment_agent_id, base_version_id) VALUES
        ( (SELECT id FROM copilot_tool_deployment_agent WHERE name = 'dee'),
        (SELECT id FROM copilot_tool_base_version WHERE name = 'v2'));"""
    )

    op.execute(
        "UPDATE copilot_tool_version SET base_version_id = (SELECT id from copilot_tool_base_version WHERE name='v1')"
    )

    op.execute(
        "UPDATE copilot_tool_version_registry_mapping SET deployment_agent_id = (SELECT id from copilot_tool_deployment_agent WHERE name='fission')"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "copilot_tool_version_registry_mapping",
        sa.Column("deployment_agent", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    )
    op.drop_constraint(
        "copilot_tool_version_registry_mapping_deployment_agent_id_fkey",
        "copilot_tool_version_registry_mapping",
        type_="foreignkey",
    )
    op.drop_column("copilot_tool_version_registry_mapping", "deployment_agent_id")
    op.drop_constraint("copilot_tool_version_base_version_id_fkey", "copilot_tool_version", type_="foreignkey")
    op.drop_column("copilot_tool_version", "base_version_id")
    op.drop_table("copilot_tool_deployment_agent_base_version_mapping")
    op.drop_table("copilot_tool_deployment_agent")
    op.drop_table("copilot_tool_base_version")
    # ### end Alembic commands ###

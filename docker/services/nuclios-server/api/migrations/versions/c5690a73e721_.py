"""empty message

Revision ID: c5690a73e721
Revises: e06af44e166c
Create Date: 2023-05-08 11:58:11.762815

"""
from alembic import op


# revision identifiers, used by Alembic.
revision = "c5690a73e721"
down_revision = "a65f1d9cdb4e"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # correcting the data anomaly in functions table and container_mapping table

    # Step 1: soft delete functions from functions table with deleted industry
    op.execute(
        """update "functions" set deleted_at=now() where industry_id in (select id from industry i where i.deleted_at is not null)"""
    )

    # Step2: Function duplicate soft delete:
    op.execute(
        """
update "functions" set deleted_at = now() where id in (
    select id from "functions" f1 inner join(
        select min(id) as min_id, industry_id, function_name
        from "functions" f where deleted_at is null
        group by industry_id, function_name
        having count(*) > 1
        ) q1 on f1.industry_id=q1.industry_id and f1.function_name=q1.function_name where deleted_at is null and f1.id != q1.min_id)
"""
    )

    # Step 3: soft delete container_mapping with deleted industries or functions
    op.execute(
        """
update container_mapping set deleted_at = now() where id in (
    SELECT
    id
    from container_mapping cm where industry_id in (
        select id from industry i where i.deleted_at is not null
        ) or function_id in (
        select id from "functions" f where f.deleted_at is not null
        ))
"""
    )

    # step 4: soft delete container mapping for duplicate container id, industry id and function id
    op.execute(
        """
update container_mapping set deleted_at = now() where id in (
    select id from container_mapping c1 inner join
    (select
     min(id) as min_id, container_id, function_id, industry_id
     FROM
     container_mapping cm where deleted_at is null
     GROUP BY
     container_id, function_id, industry_id
     HAVING
     COUNT(*) > 1
     ) q1 on c1.container_id=q1.container_id and c1.industry_id=q1.industry_id and c1.function_id=q1.function_id where deleted_at is null and c1.id != q1.min_id)
"""
    )

    # step 5: insert a miscellaneous industry to address all the industry less containers
    op.execute(
        """
INSERT INTO public.industry(created_at, updated_at, deleted_at, industry_name, logo_name, created_by, updated_by, deleted_by, horizon, color, "level", description)
select now(), NULL, NULL, 'Miscellaneous Industry', 'Technology',
    NULL, NULL, NULL, 'vertical', NULL, NULL, ''
where not exists (
    select id from public.industry where industry_name = 'Miscellaneous Industry'
)
"""
    )

    # step 6: insert a miscellaneous function to address all the function less containers
    op.execute(
        """
INSERT INTO public."functions"
(created_at, updated_at, deleted_at, function_name, description,
 logo_name, created_by, updated_by, deleted_by, parent_function_id, color, "level")
select now(), NULL, NULL, 'Miscellaneous Function', '', 'RetailCustomerInsightsIcon', NULL, NULL, NULL, NULL, NULL, null
where not exists (
    select f.id from public."functions" f inner join industry i on f.industry_id = i.id where i.industry_name = 'Miscellaneous Industry'
)
"""
    )

    # step 7: update function with Miscellaneous Industry id
    op.execute(
        """
update public."functions"
set
industry_id = (select id from "industry" where industry_name='Miscellaneous Industry')
where industry_id is null
"""
    )

    # step 8: insert container into container mapping table which doesn't have mapping with any function/industry
    op.execute(
        """
insert into container_mapping(container_id)
select container_id from app where container_id not in (select container_id from container_mapping cm)
"""
    )

    # step 9: update container_mapping records which is not mapped with any industry or fucntion
    op.execute(
        """
update container_mapping
set
industry_id = (select i.id from "functions" f inner join industry i on f.industry_id = i.id where i.industry_name = 'Miscellaneous Industry' and function_name='Miscellaneous Function'),
function_id = (select f.id from "functions" f inner join industry i on f.industry_id = i.id where i.industry_name = 'Miscellaneous Industry' and function_name='Miscellaneous Function')
where industry_id is null or function_id is null
"""
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

"""empty message

Revision ID: 5487b27a5a4e
Revises: ed0194f5faa4
Create Date: 2024-03-06 20:07:27.811863

"""
from alembic import op
import sqlalchemy as sa
import logging
import json


# revision identifiers, used by Alembic.
revision = "5487b27a5a4e"
down_revision = "06c489bbecda"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "copilot_orchestrator",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("identifier", sa.String(length=100), nullable=True),
        sa.Column("desc", sa.Text(), nullable=True),
        sa.Column("config", sa.JSON(), nullable=True),
        sa.Column("disabled", sa.Boolean(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute(
        """INSERT INTO public.copilot_orchestrator (name, identifier, "desc", config) VALUES ('Prompt Based Orchestrator', 'PromptAgent', 'This orchestrator evaluates a given prompt alongside detailed descriptions of available tools to intelligently determine the most appropriate tool for answering specific queries', '{"system_message": ""}'::json);"""
    )
    op.execute(
        """INSERT INTO public.copilot_orchestrator (name, identifier, "desc", config) VALUES ('OpenAI Function Based Orchestrator', 'FunctionCallAgent', 'This orchestrator utilizes OpenAIs predefined functions and capabilities to directly manage and route questions to the optimal tool', '{"input_params_enabled": true, "system_message": "Dont make assumptions about what values to plug into functions. Ask for clarification if a user request is ambiguous."}'::json);"""
    )
    op.add_column("copilot_app_published_tool_mapping", sa.Column("preprocess_config", sa.JSON(), nullable=True))
    op.add_column("copilot_app_published_tool_mapping", sa.Column("input_params", sa.JSON(), nullable=True))
    op.alter_column(
        "minerva_conversation",
        "feedback",
        existing_type=sa.VARCHAR(length=1000),
        type_=sa.Integer(),
        existing_nullable=True,
        postgresql_using="feedback::integer",
    )
    op.add_column("copilot_app", sa.Column("orchestrator_config", sa.JSON(), nullable=True))
    op.add_column("copilot_app", sa.Column("orchestrator_id", sa.Integer(), nullable=True))
    op.create_foreign_key(
        "copilot_app_orchestrator_id_fkey", "copilot_app", "copilot_orchestrator", ["orchestrator_id"], ["id"]
    )
    op.create_table(
        "copilot_app_datasource_published_tool_mapping",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("datasource_id", sa.Integer(), nullable=True),
        sa.Column("app_published_tool_id", sa.Integer(), nullable=True),
        sa.Column("key", sa.String(length=100), nullable=True),
        sa.Column("config", sa.JSON(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["app_published_tool_id"],
            ["copilot_app_published_tool_mapping.id"],
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["datasource_id"],
            ["copilot_data_source.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.alter_column(
        "copilot_app_published_tool_mapping",
        "desc",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.Text(),
        existing_nullable=True,
    )
    op.alter_column(
        "copilot_tool", "desc", existing_type=sa.VARCHAR(length=100), type_=sa.Text(), existing_nullable=True
    )
    op.alter_column(
        "copilot_tool_registry", "desc", existing_type=sa.VARCHAR(length=100), type_=sa.Text(), existing_nullable=True
    )
    op.add_column("copilot_tool_version", sa.Column("input_params", sa.JSON(), nullable=True))
    op.add_column("copilot_tool_version", sa.Column("config", sa.JSON(), nullable=True))
    op.create_table(
        "copilot_tool_version_orchestrator_mapping",
        sa.Column("tool_version_id", sa.Integer(), nullable=True),
        sa.Column("orchestrator_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["orchestrator_id"],
            ["copilot_orchestrator.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tool_version_id"],
            ["copilot_tool_version.id"],
        ),
    )
    op.execute(
        """INSERT INTO copilot_tool_version_orchestrator_mapping (tool_version_id, orchestrator_id)
SELECT tv.id, o.id
FROM copilot_tool_version tv
CROSS JOIN copilot_orchestrator o
WHERE o.identifier = 'PromptAgent';"""
    )
    update_tool_datasource_mapping()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("copilot_tool_version_orchestrator_mapping")
    op.drop_column("copilot_tool_version", "config")
    op.drop_column("copilot_tool_version", "input_params")
    op.alter_column(
        "copilot_tool_registry", "desc", existing_type=sa.Text(), type_=sa.VARCHAR(length=100), existing_nullable=True
    )
    op.alter_column(
        "copilot_tool", "desc", existing_type=sa.Text(), type_=sa.VARCHAR(length=100), existing_nullable=True
    )
    op.alter_column(
        "copilot_app_published_tool_mapping",
        "desc",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(length=100),
        existing_nullable=True,
    )
    op.drop_table("copilot_app_datasource_published_tool_mapping")
    op.drop_constraint("copilot_app_orchestrator_id_fkey", "copilot_app", type_="foreignkey")
    op.drop_column("copilot_app", "orchestrator_id")
    op.drop_column("copilot_app", "orchestrator_config")
    op.alter_column(
        "minerva_conversation",
        "feedback",
        existing_type=sa.Integer(),
        type=sa.VARCHAR(length=1000),
        existing_nullable=True,
    )
    op.drop_column("copilot_app_published_tool_mapping", "input_params")
    op.drop_column("copilot_app_published_tool_mapping", "preprocess_config")
    op.drop_table("copilot_orchestrator")
    # ### end Alembic commands ###


def update_tool_datasource_mapping():
    try:
        connection = op.get_bind()
        res = connection.execute(
            """
        SELECT *
        FROM public.copilot_app_published_tool_mapping ap_tool
        WHERE ap_tool.deleted_at is null ;"""
        )
        existing_tools = res.mappings().all()

        for tool in existing_tools:
            if tool.config == {} or tool.config is None:
                pass
            else:
                valid_datasource = False
                new_tool_datasource_mapping_config = (
                    {}
                )  # create a config obj for copilot_app_datasource_published_tool_mapping
                updated_app_published_tool_config = {
                    **tool.config
                }  # create an updated config json for app_published_tool_mapping table
                if tool.config.get("datasource", False):
                    tool_ds_id = tool.config.get("datasource", False)
                    # check if datasource exist
                    datasource_res = connection.execute(
                        f"""
                            SELECT *
                            FROM public.copilot_data_source ds
                            WHERE ds.id = {tool_ds_id} and ds.deleted_at is null ;"""
                    )

                    is_datasource_present = datasource_res.mappings().all()
                    valid_datasource = True if is_datasource_present else False

                    del updated_app_published_tool_config["datasource"]

                if valid_datasource:
                    if tool.config.get("datasource_type", False):
                        new_tool_datasource_mapping_config["datasource_type"] = tool.config.get("datasource_type", "")
                        del updated_app_published_tool_config["datasource_type"]
                    if tool.config.get("datasource_table", False):
                        new_tool_datasource_mapping_config["datasource_table"] = tool.config.get("datasource_table", [])
                        del updated_app_published_tool_config["datasource_table"]

                    insert_record_query = f"insert into public.copilot_app_datasource_published_tool_mapping (created_at, updated_at, deleted_at, datasource_id, app_published_tool_id, \"key\", config, created_by, updated_by, deleted_by) VALUES ('now()', NULL, NULL, {tool.config.get('datasource')}, {tool.id}, NULL, '{json.dumps(new_tool_datasource_mapping_config)}'::json, {tool.created_by if tool.created_by else 'NULL'}, NULL, NULL )"
                    op.execute(insert_record_query)

                    update_record_query = f"update public.copilot_app_published_tool_mapping set config='{json.dumps(updated_app_published_tool_config)}'::json where id={tool.id}"
                    op.execute(update_record_query)
                else:
                    pass

    except Exception as e:
        logging.warning(e)

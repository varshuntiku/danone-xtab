"""empty message

Revision ID: 6ea991509cd3
Revises: 87ccb297599c
Create Date: 2024-02-08 19:50:26.517977

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


def drop_constraints(op, table_name, column_name):
    conn = op.get_bind()
    inspector = inspect(conn)

    # Define your table and column names
    table_name = table_name
    column_name = column_name
    # Get the dynamically generated foreign key constraint name
    foreign_keys = inspector.get_foreign_keys(table_name)
    print(foreign_keys)

    # Find the correct foreign key constraint dynamically
    constraint_name = None
    for fk in foreign_keys:
        if fk["constrained_columns"] == [column_name]:
            constraint_name = fk["name"]
            break

    if constraint_name:
        # Drop the foreign key constraint using its dynamic name
        op.drop_constraint(constraint_name, table_name, type_="foreignkey")


# revision identifiers, used by Alembic.
revision = "6ea991509cd3"
down_revision = "87ccb297599c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "llm_cloud_provider",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "llm_model_config",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.Column("model_path", sa.String(length=255), nullable=True),
        sa.Column("model_path_type", sa.String(length=255), nullable=True),
        sa.Column("api_key", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["llm_model_registry.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "llm_experiment_checkpoint",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("experiment_id", sa.Integer(), nullable=True),
        sa.Column("model_path", sa.String(length=255), nullable=True),
        sa.Column("checkpoint_path", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["llm_experiment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "llm_experiment_run_tracer",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("experiment_id", sa.Integer(), nullable=True),
        sa.Column("pod_name", sa.String(length=255), nullable=True),
        sa.Column("container_name", sa.String(length=255), nullable=True),
        sa.Column("pod_status", sa.String(length=255), nullable=True),
        sa.Column("namespace", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("deleted_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["deleted_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["llm_experiment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("llm_compute_config", sa.Column("type", sa.String(length=255), nullable=True))
    op.add_column("llm_compute_config", sa.Column("ram", sa.Integer(), nullable=True))
    op.add_column("llm_compute_config", sa.Column("storage_size", sa.String(length=255), nullable=True))
    op.add_column("llm_compute_config", sa.Column("iops", sa.Integer(), nullable=True))
    op.add_column("llm_compute_config", sa.Column("cloud_provider_id", sa.Integer(), nullable=True))
    op.create_foreign_key(None, "llm_compute_config", "llm_cloud_provider", ["cloud_provider_id"], ["id"])
    op.drop_column("llm_compute_config", "disk_size")
    op.drop_column("llm_compute_config", "memory")
    op.add_column("llm_data_registry", sa.Column("dataset_name", sa.String(length=255), nullable=True))
    op.add_column("llm_data_registry", sa.Column("file_path", sa.String(length=255), nullable=True))
    op.add_column("llm_data_registry", sa.Column("dataset_folder", sa.String(length=255), nullable=True))
    op.drop_column("llm_data_registry", "file_location")
    op.add_column("llm_experiment", sa.Column("experiment_settings_id", sa.Integer(), nullable=True))
    # op.drop_constraint("llm_experiment_llm_experiment_settings_id_fkey", "llm_experiment", type_="foreignkey")
    drop_constraints(op, "llm_experiment", "llm_experiment_settings_id")

    op.create_foreign_key(
        "llm_experiment_llm_experiment_settings_id_fkey",
        "llm_experiment",
        "llm_experiment_setting",
        ["experiment_settings_id"],
        ["id"],
    )
    op.drop_column("llm_experiment", "llm_experiment_settings_id")
    op.add_column("llm_experiment_result", sa.Column("experiment_id", sa.Integer(), nullable=True))
    # op.drop_constraint("llm_experiment_result_llm_experiment_id_fkey", "llm_experiment_result", type_="foreignkey")
    drop_constraints(op, "llm_experiment_result", "llm_experiment_id")

    op.create_foreign_key(
        "llm_experiment_result_llm_experiment_id_fkey",
        "llm_experiment_result",
        "llm_experiment",
        ["experiment_id"],
        ["id"],
    )
    op.drop_column("llm_experiment_result", "llm_experiment_id")
    op.add_column("llm_experiment_setting", sa.Column("lora_rank", sa.Integer(), nullable=True))
    op.add_column("llm_model_registry", sa.Column("description", sa.String(length=255), nullable=True))
    op.add_column("llm_model_registry", sa.Column("problem_type", sa.String(length=255), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("llm_model_registry", "problem_type")
    op.drop_column("llm_model_registry", "description")
    op.drop_column("llm_experiment_setting", "lora_rank")
    op.add_column(
        "llm_experiment_result", sa.Column("llm_experiment_id", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.drop_constraint("llm_experiment_result_llm_experiment_id_fkey", "llm_experiment_result", type_="foreignkey")
    op.create_foreign_key(
        "llm_experiment_result_llm_experiment_id_fkey",
        "llm_experiment_result",
        "llm_experiment",
        ["llm_experiment_id"],
        ["id"],
    )
    op.drop_column("llm_experiment_result", "experiment_id")
    op.add_column(
        "llm_experiment", sa.Column("llm_experiment_settings_id", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.drop_constraint("llm_experiment_llm_experiment_settings_id_fkey", "llm_experiment", type_="foreignkey")
    op.create_foreign_key(
        "llm_experiment_llm_experiment_settings_id_fkey",
        "llm_experiment",
        "llm_experiment_setting",
        ["llm_experiment_settings_id"],
        ["id"],
    )
    op.drop_column("llm_experiment", "experiment_settings_id")
    op.add_column(
        "llm_data_registry", sa.Column("file_location", sa.VARCHAR(length=255), autoincrement=False, nullable=True)
    )
    op.drop_column("llm_data_registry", "dataset_folder")
    op.drop_column("llm_data_registry", "file_path")
    op.drop_column("llm_data_registry", "dataset_name")
    op.add_column("llm_compute_config", sa.Column("memory", sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column(
        "llm_compute_config", sa.Column("disk_size", sa.VARCHAR(length=255), autoincrement=False, nullable=True)
    )
    op.drop_constraint("llm_compute_config_cloud_provider_id_fkey", "llm_compute_config", type_="foreignkey")
    op.drop_column("llm_compute_config", "cloud_provider_id")
    op.drop_column("llm_compute_config", "iops")
    op.drop_column("llm_compute_config", "storage_size")
    op.drop_column("llm_compute_config", "ram")
    op.drop_column("llm_compute_config", "type")
    op.drop_table("llm_experiment_run_tracer")
    op.drop_table("llm_experiment_checkpoint")
    op.drop_table("llm_model_config")
    op.drop_table("llm_cloud_provider")
    # ### end Alembic commands ###

"""empty message

Revision ID: 86d878b32c83
Revises: 518467c76d9a
Create Date: 2024-03-11 16:52:37.789129

"""
from alembic import op

# revision identifiers, used by Alembic.
revision = '86d878b32c83'
down_revision = '518467c76d9a'
branch_labels = None
depends_on = None

langchain_pg_embedding_table = 'langchain_pg_embedding_copilot_external'
langchain_pg_collection_table = 'langchain_pg_collection_copilot_external'
unstructured_documents_table = 'unstructured_documents_copilot_external'
unstructured_pipeline_status_table = 'unstructured_pipeline_status_copilot_external'


def upgrade():
    connection = op.get_bind()
    res = connection.execute('SELECT * FROM pg_extension;')
    results_as_dict = res.mappings().all()
    vector_enabled_in_db = any(x.extname == 'vector' for x in results_as_dict)

    if vector_enabled_in_db:
        res2 = connection.execute('''
        SELECT n.nspname,
        p.proname
        FROM pg_catalog.pg_namespace n
        JOIN pg_catalog.pg_proc p ON p.pronamespace = n.oid
        WHERE p.proname = 'vector';''')
        results_as_dict2 = res2.mappings().all()
        vector_in_public = any(x.nspname == 'public' for x in results_as_dict2)
        vector_in_other_schema = bool(len(results_as_dict2) and not vector_in_public)
    else:
        vector_in_public = False
        vector_in_other_schema = False

    vector_tobe_enabled = vector_enabled_in_db and (not vector_in_other_schema) and (not vector_in_public)

    if vector_tobe_enabled:
        op.execute('CREATE EXTENSION IF NOT EXISTS vector')
        vector_in_public = True

    op.execute(f'''
CREATE TABLE IF NOT EXISTS {langchain_pg_collection_table} (
"name" varchar NULL,
cmetadata json NULL,
uuid uuid NOT NULL,
CONSTRAINT {langchain_pg_collection_table}_pkey PRIMARY KEY (uuid)
);
''')

    op.execute(f'''
CREATE TABLE IF NOT EXISTS {langchain_pg_embedding_table} (
collection_id uuid NULL,
embedding {'vector' if vector_in_public else 'float'} NULL,
"document" varchar NULL,
cmetadata json NULL,
custom_id varchar NULL,
uuid uuid NOT NULL,
CONSTRAINT {langchain_pg_embedding_table}_pkey PRIMARY KEY (uuid),
CONSTRAINT {langchain_pg_embedding_table}_collection_id_fkey FOREIGN KEY (collection_id) REFERENCES {langchain_pg_collection_table}(uuid) ON DELETE CASCADE
);
''')

    op.execute(f'''
CREATE TABLE IF NOT EXISTS {unstructured_documents_table} (
id serial4 NOT NULL,
copilot_tool_id int4 NULL,
"name" text NULL,
document_status text NULL,
created_at timestamptz NULL DEFAULT timezone('Asia/Kolkata'::text, now()),
updated_at timestamptz NULL DEFAULT timezone('Asia/Kolkata'::text, now()),
deleted_at timestamptz NULL,
CONSTRAINT {unstructured_documents_table}_pkey PRIMARY KEY (id)
);
''')
    op.execute(f'''
CREATE TABLE IF NOT EXISTS {unstructured_pipeline_status_table} (
id serial4 NOT NULL,
copilot_tool_id int4 NULL,
run_id text NULL,
job_status text NULL,
pipeline_type text NULL,
created_at timestamptz NULL DEFAULT timezone('Asia/Kolkata'::text, now()),
updated_at timestamptz NULL DEFAULT timezone('Asia/Kolkata'::text, now()),
deleted_at timestamptz NULL,
CONSTRAINT {unstructured_pipeline_status_table}_pkey PRIMARY KEY (id)
);
''')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.execute(f'DROP TABLE IF EXISTS {unstructured_pipeline_status_table}')
    # op.execute(f'DROP TABLE IF EXISTS {unstructured_documents_table}')
    # op.execute(f'DROP TABLE IF EXISTS {langchain_pg_embedding_table}')
    # op.execute(f'DROP TABLE  IF EXISTS {langchain_pg_collection_table}')
    # ### end Alembic commands ###
    pass

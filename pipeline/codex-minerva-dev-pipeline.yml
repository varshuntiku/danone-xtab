name: CODX_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - minerva-dev
variables:
- group: minerva-dev-frontend-environment-variables
- name: REACT_APP_JUPYTER_DEMO_TOKEN
  value: $[variables.ReactAppJupyterDemoToken]
- name: REACT_APP_MATOMO_TOKEN
  value: $[variables.ReactAppMatomoToken]
- name: REACT_APP_APPLICATIONINSIGHTS_CONNECTION_STRING
  value: $[variables.ReactAppApplicationInsightsConnectionString]
- name: REACT_APP_GOOGLE_MAPS_KEY
  value: $[variables.ReactAppGoogleMapsKey]
- name: DEV_STORAGE_ACCOUNT_KEY
  value: $[variables.DevStorageAccountKey]

- group: release-version
- name: CODEX_PRODUCT_APP_VERSION
  value: $[variables.CodexProductAppVersion]

stages:
- stage: Minerva_WC
  dependsOn: []
  condition: succeeded()
  jobs:
  - job: Minerva_WC
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18'
    - script: |
        cd docker/services/minerva-wc
        npm install --legacy-peer-deps --no-optional
        cd ../../..
    - script: |
        cd docker/services/minerva-wc
        rm -rf .env
        echo 'SERVER_URL='$(CODEX_PRODUCT_APP_MINERVA_BACKEND_URL)| cat >> .env
        echo 'MINERVA_VERSION='$(CODEX_MINERVA_WC_VERSION)| cat >> .env
        echo 'HOST_URL='$(CODEX_PRODUCT_MINERVA_WC_HOST_URL)| cat >> .env
        echo 'TEST_SERVER_URL='$(CODEX_PRODUCT_APP_COPILOT_TEST_API)| cat >> .env
        cat .env
        cd ../../..
      displayName: 'Create .env file'
    - script: |
        cd docker/services/minerva-wc
        rm -rf build
        npm run build
        ls
        cd ../../..
      displayName: 'Build Minerva_WC'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/docker/services/minerva-wc/dist'
        ArtifactName: 'minerva-web-component'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
- stage: Frontend_Build_Job
  dependsOn: []
  condition: succeeded()
  jobs:
  - job: Platform_UI
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18'
    - script: |
        cd docker/services/client
        npm install --legacy-peer-deps --no-optional
        cd ../../..
    - script: |
        cd docker/services/client
        rm -rf .env
        echo 'NODE_PATH='$(CODEX_PLATFORM_NODE_PATH) | cat > .env
        echo 'REACT_APP_BACKEND_API='$(CODEX_PLATFORM_APP_BACKEND_API) | cat >> .env
        echo 'REACT_APP_MLFLOW_API='$(CODEX_PLATFORM_APP_MLFLOW_API)| cat >> .env
        echo 'REACT_APP_JUPYTER_DEMO_URL='$(CODEX_PLATFORM_APP_JUPYTER_DEMO_URL)| cat >> .env
        echo 'REACT_APP_JUPYTER_DEMO_TOKEN='$(ReactAppJupyterDemoToken)| cat >> .env
        echo 'REACT_APP_ENV='$(CODEX_PLATFORM_APP_ENV)| cat >> .env
        echo 'REACT_APP_PRODUCT_URL='"$(CODEX_PLATFORM_APP_PRODUCT_URL)<app_id>"| cat >> .env
        echo 'INLINE_RUNTIME_CHUNK='$(CODEX_PLATFORM_INLINE_RUNTIME_CHUNK)| cat >> .env
        echo 'GENERATE_SOURCEMAP'=$(CODEX_PLATFORM_GENERATE_SOURCEMAP)| cat >> .env
        cat .env
        cd ../../..
      displayName: 'Create ENV file'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
    - script: |
        cd docker/services/client
        rm -rf build
        npm run build
        cp .htaccess build/.htaccess
        cd ../../..
      displayName: "Create Platform UI build"
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
    - task: Docker@2
      inputs:
        containerRegistry: "Azure-CR"
        repository: "nuclios-platform-ui-preprod"
        command: "buildAndPush"
        Dockerfile: "docker/platform.frontend.dockerfile"
        tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
      displayName: "Build & Push Platform-FE Image to ACR"
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))

  - job: Product_UI
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        cd docker/services/product-client
        rm -rf .env
        echo 'NODE_PATH='$(CODEX_PRODUCT_NODE_PATH) | cat > .env
        echo 'REACT_APP_BACKEND_API='$(CODEX_PRODUCT_APP_BACKEND_API) | cat >> .env
        echo 'REACT_APP_PLATFORM_BACKEND_API='$(CODEX_PRODUCT_APP_PLATFORM_BACKEND_API)| cat >> .env
        echo 'REACT_APP_SOCKET_IO='$(CODEX_PRODUCT_APP_SOCKET_IO)| cat >> .env
        echo 'REACT_APP_GENAI='$(REACT_APP_GENAI)| cat >> .env
        echo 'REACT_APP_PLATFORM_SOCKET_IO='$(CODEX_PRODUCT_APP_PLATFORM_SOCKET_IO)| cat >> .env
        echo 'REACT_APP_PLATFORM='$(CODEX_PRODUCT_APP_PLATFORM)| cat >> .env
        echo 'REACT_APP_ENV='$(CODEX_PRODUCT_APP_ENV)| cat >> .env
        echo 'REACT_APP_SERVERLESS_API='$(CODEX_PRODUCT_APP_SERVERLESS_API)| cat >> .env
        echo 'REACT_APP_JUPYTER_DEMO_URL='$(CODEX_PRODUCT_APP_JUPYTER_DEMO_URL)| cat >> .env
        echo 'REACT_APP_JUPYTER_DEMO_TOKEN='$(ReactAppJupyterDemoToken)| cat >> .env
        echo 'REACT_APP_VERSION='$(CodexProductAppVersion)| cat >> .env
        echo 'REACT_APP_MATOMO_SITE_ID='$(CODEX_PRODUCT_APP_MATOMO_SITE_ID)| cat >> .env
        echo 'REACT_APP_MATOMO_SITE_URL='$(CODEX_PRODUCT_APP_MATOMO_SITE_URL)| cat >> .env
        echo 'REACT_APP_MATOMO_TOKEN='"'$(ReactAppMatomoToken)'"| cat >> .env
        echo 'INLINE_RUNTIME_CHUNK='$(CODEX_PRODUCT_INLINE_RUNTIME_CHUNK)| cat >> .env
        echo 'REACT_APP_MINERVA_BACKEND_URL='$(CODEX_PRODUCT_APP_MINERVA_BACKEND_URL)| cat >> .env
        echo 'SKIP_PREFLIGHT_CHECK='$(CODEX_PRODUCT_SKIP_PREFLIGHT_CHECK)| cat >> .env
        echo 'REACT_APP_STATIC_DATA_ASSET='$(CODEX_PRODUCT_APP_STATIC_DATA_ASSET)| cat >> .env
        echo 'REACT_APP_APPLICATIONINSIGHTS_CONNECTION_STRING='"'$(ReactAppApplicationInsightsConnectionString)'" | cat >> .env
        echo 'GENERATE_SOURCEMAP'=$(CODEX_PRODUCT_GENERATE_SOURCEMAP)| cat >> .env
        echo 'REACT_APP_GOOGLE_MAPS_KEY='"'$(ReactAppGoogleMapsKey)'"| cat >> .env
        echo 'REACT_APP_ENABLE_MINERVA='$(CODEX_PRODUCT_ENABLE_MINERVA)| cat >> .env
        echo 'REACT_APP_ENABLE_COPILOT='$(CODEX_PRODUCT_ENABLE_COPILOT)| cat >> .env
        echo 'REACT_APP_MINERVA_SOCKET_IO='$(CODEX_PRODUCT_MINERVA_SOCKET_IO)| cat >> .env
        echo 'REACT_APP_MINERVA_WC_HOST_URL='$(CODEX_PRODUCT_MINERVA_WC_HOST_URL)| cat >> .env
        echo 'REACT_APP_ENABLE_LLMWORKBENCH='$(REACT_APP_ENABLE_LLMWORKBENCH)| cat >> .env
        echo 'REACT_APP_GENAI_COOKBOOK_URL='"'$(REACTAPPGENAICOOKBOOKURL)'"| cat >> .env
        echo 'REACT_APP_GENAI_APPROVAL_USERS='"'$(GENAIAPPROVALUSERS)'"| cat >> .env
        echo 'REACT_APP_COPILOT_ADMIN_CLIENT='"'$(CODEX_APP_COPILOT_ADMIN_CLIENT)'"| cat >> .env
        echo 'REACT_APP_COPILOT_TEST_API='$(CODEX_PRODUCT_APP_COPILOT_TEST_API)| cat >> .env
        cat .env
        cd ../../..
      displayName: "Create Env file"
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
    - task: Docker@2
      inputs:
        containerRegistry: "Azure-CR"
        repository: "nuclios-product-ui-preprod"
        command: "buildAndPush"
        Dockerfile: "docker/services/product-client/Dockerfile"
        tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
      displayName: "Build & Push Product-FE Image to ACR"
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
- stage: Backend_Build_Job
  dependsOn: []
  condition: succeeded()
  jobs:
  - job: Platform_API
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: "Azure-CR"
          repository: "nuclios-platform-api-preprod"
          command: "buildAndPush"
          Dockerfile: "docker/server.dockerfile"
          tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
        displayName: "Build & Push Platform-API Image to ACR"
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))

  - job: Product_API
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'Azure-CR'
        repository: 'nuclios-product-server-preprod'
        command: 'buildAndPush'
        Dockerfile: 'docker/product.server.dockerfile'
        tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
      displayName: 'Build & Push Product-API Image to ACR'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
- stage: BG_JOBS
  dependsOn: []
  condition: succeeded()
  jobs:
  - job: BG_Functions
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'
    - bash: |
        cd docker/services/background-functions/codex-bgjobs
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      displayName: 'Create Background jobs server build'
    - script: |
        cd docker/services/background-functions/codex-bgjobs/QueueTrigger
        rm -rf config.py
        cp config_dev.py config.py
        rm -rf function.json
        cp function.dev.json function.json
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'docker/services/background-functions/codex-bgjobs'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-bgjob-minerva-dev.zip'
        replaceExistingArchive: true
      displayName: 'Save build artifact'
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-bgjob-minerva-dev.zip'
        ArtifactName: 'job-server-build'
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))

- stage: GenAI
  dependsOn: []
  condition: succeeded()
  jobs:
  - job: check_folder_image
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - script: |
          token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
          https://login.microsoftonline.com/$(TenantId)/oauth2/token \
          -d 'client_id=$(ClientId)' \
          -d 'grant_type=client_credentials' \
          -d 'resource=https://management.core.windows.net/' \
          -d 'client_secret=$(ClientSecret)')
          echo $token
          access_token=$(echo $token | jq '.access_token')
          echo "##vso[task.setvariable variable=access_token]$access_token"
      - script: |
          curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
          if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/genai-server") -eq 0 ]; then
            echo "No code changes in GenAI Server"
            echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
          else
            echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
            echo "Code Changes in GenAI Server"
          fi
        name: checkFolderGenAIServer

  - job: GenAI_Image_BuildPush_to_ACR
    variables:
      folderVar: $[dependencies.check_folder_image.outputs['checkFolderGenAIServer.RunJob']]
    dependsOn: check_folder_image
    condition: eq(variables.folderVar, true)
    steps:
      - script: |
          mkdir docker/services/genai-server/cert
          cd docker/services/genai-server/cert
          echo "$(GenaiCertCombined)" > genai.crt
      - task: Docker@2
        inputs:
          containerRegistry: "Azure-CR"
          repository: "genai-server-preprod"
          command: "buildAndPush"
          Dockerfile: "docker/services/genai-server/Dockerfile"
          tags: latest
        displayName: "Build & Push Image to ACR"
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/minerva-dev'))
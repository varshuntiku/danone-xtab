name: Nuclios-Code-Executor-$(Date:ddMMyyyy)-$(Rev:r)-$(CodexProductAppVersion)
trigger:
  batch: true
  branches:
    include:
    - qa

variables:

- group: frontend-environment-variables
- group: release-version
- name: CODEX_PRODUCT_APP_VERSION
  value: $[variables.CodexProductAppVersion]
- group: code-executor-service-variables-qa

stages:
  - stage: Generate_ConfigMaps
    dependsOn: []
    condition: always()
    jobs:
      - job: generate_code_executor_configMap
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureCLI@2
            displayName: Generate Code Executor Config Map
            inputs:
              azureSubscription: 'MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "apiVersion: v1" > code-executor-config-map.yaml
                echo "kind: ConfigMap" >> code-executor-config-map.yaml
                echo "metadata:" >> code-executor-config-map.yaml
                echo "  name: $(CODE_EXECUTOR_CONFIGMAP_NAME)" >> code-executor-config-map.yaml
                echo "  namespace: $(DEPLOYMENT_NAMESPACE)" >> code-executor-config-map.yaml
                echo "data:" >> code-executor-config-map.yaml
                echo "  ALLOWED_HEADERS: $(CODE_EXECUTOR_ALLOWED_HEADERS)" >> code-executor-config-map.yaml
                echo "  ALLOWED_METHODS: $(CODE_EXECUTOR_ALLOWED_METHODS)" >> code-executor-config-map.yaml
                echo "  ALLOWED_ORIGINS: $(CODE_EXECUTOR_ALLOWED_ORIGINS)" >> code-executor-config-map.yaml
                echo "  ROOT_PATH: $(CODE_EXECUTOR_ROOT_PATH)" >> code-executor-config-map.yaml
                echo "  OPENAPI_URL: $(OPENAPI_URL)" >> code-executor-config-map.yaml
                cat code-executor-config-map.yaml

          - task: PublishBuildArtifacts@1
            displayName: Publish Code Executor Config Map
            inputs:
              PathtoPublish: 'code-executor-config-map.yaml'
              ArtifactName: 'code-executor-config'

  - stage: CodeExecutor_Build_Push_Image
    dependsOn: []
    condition: always()
    jobs:
      - job: CodeExecutor_check_folder
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
              https://login.microsoftonline.com/$(TenantId)/oauth2/token \
              -d 'client_id=$(ClientId)' \
              -d 'grant_type=client_credentials' \
              -d 'resource=https://management.core.windows.net/' \
              -d 'client_secret=$(ClientSecret)')
              echo $token
              access_token=$(echo $token | jq '.access_token')
              echo "##vso[task.setvariable variable=access_token]$access_token"
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/code-executor-service") -eq 0 ]; then
                echo "No code changes in Code Executor Service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Code Executor Service"
              fi
            name: checkFolderCodeExecutorService

      - job: Code_Executor_Service_Deployemnt
        variables:
          folderVar: $[dependencies.CodeExecutor_check_folder.outputs['checkFolderCodeExecutorService.RunJob']]
        dependsOn: CodeExecutor_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "code-executor-service-qa"
              command: "buildAndPush"
              Dockerfile: "docker/code_executor.dockerfile"
              tags: latest
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/qa'))

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                accountKey=$(az storage account keys list -g $(resourcegroupName) -n $(storageAccountName) --query [0].value -o tsv)
                az storage directory create --name $(fileShareDirectoryName) --share-name $(fileShareName) --account-key $accountKey --account-name $(storageAccountName)
                az storage directory create --name $(widgetFileShareDirectoryName) --share-name $(fileShareName) --account-key $accountKey --account-name $(storageAccountName)

                az storage file upload-batch \
                  --account-name "$(storageAccountName)" \
                  --account-key "$accountKey" \
                  --destination "$(fileShareName)" \
                  --source "$(codeExecutorDirectory)"  \
                  --destination-path "$(fileShareDirectoryName)"

                az storage file upload-batch \
                  --account-name "$(storageAccountName)" \
                  --account-key "$accountKey" \
                  --destination "$(fileShareName)" \
                  --source "$(widgetFactoryDirectory)"  \
                  --destination-path "$(widgetFileShareDirectoryName)"
              displayName: Azure FileShare Upload
              condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/qa'))
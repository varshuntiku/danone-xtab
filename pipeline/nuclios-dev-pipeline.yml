name: NUCLIOS-DEV-$(Date:ddMMyyyy)-$(Rev:r)-$(CodexProductAppVersion)
trigger:
  batch: true
  branches:
    include:
      - dev
variables:
  - group: frontend-environment-variables
  - name: REACT_APP_JUPYTER_DEMO_TOKEN
    value: $[variables.ReactAppJupyterDemoToken]
  - name: REACT_APP_MATOMO_TOKEN
    value: $[variables.ReactAppMatomoToken]
  - name: REACT_APP_APPLICATIONINSIGHTS_CONNECTION_STRING
    value: $[variables.ReactAppApplicationInsightsConnectionString]
  - name: REACT_APP_GOOGLE_MAPS_KEY
    value: $[variables.ReactAppGoogleMapsKey]
  - name: GENAI_APPROVAL_USERS
    value: $[variables.GENAIAPPROVALUSERS]
  - name: REACT_APP_GENAI_COOKBOOK_URL
    value: $[variables.REACTAPPGENAICOOKBOOKURL]

  - group: release-version
  - name: CODEX_PRODUCT_APP_VERSION
    value: $[variables.CodexProductAppVersion]

  - group: GENAI-CERT
  - name: GENAI_MATHCO_COMBINED_CERT
    value: $[variables.GenaiCertCombined]

  - group: genai-variables
  - group: dynamic-execution-environment-variables
  - group: code-executor-service-variables

stages:
  - stage: Build_Job
    dependsOn: []
    condition: succeeded()
    jobs:
      - job: check_folder
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
              https://login.microsoftonline.com/$(TenantId)/oauth2/token \
              -d 'client_id=$(ClientId)' \
              -d 'grant_type=client_credentials' \
              -d 'resource=https://management.core.windows.net/' \
              -d 'client_secret=$(ClientSecret)')
              echo $token
              access_token=$(echo $token | jq '.access_token')
              echo "##vso[task.setvariable variable=access_token]$access_token"
          # - script: |
          #     curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
          #     if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/client") -eq 0 ]; then
          #       echo "No code changes in Platform FE"
          #       echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
          #     else
          #       echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
          #       echo "Code Changes in Platform FE"
          #     fi
          #   name: checkFolderFrontendPlatform
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "docker/services/global-style") -eq 0 ]; then
                echo "No code changes in global-style"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in global-style"
              fi
            name: checkFolderGlobalStyle
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "docker/services/nuclios-workbench/web-components/solution-blueprint") -eq 0 ]; then
                echo "No code changes in solution-blueprint"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in solution-blueprint"
              fi
            name: checkFolderSolutionBlueprint
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/product-client") -eq 0 ]; then
                echo "No code changes in Product FE"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Product FE"
              fi
            name: checkFolderFrontendProduct
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/server") -eq 0 ]; then
                echo "No code changes in Platform BE"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Platform BE"
              fi
            name: checkFolderBackendPlatform
          # - script: |
          #     curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
          #     if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/product-server") -eq 0 ]; then
          #       echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
          #       echo "No code changes in Product BE"
          #     else
          #       echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
          #       echo "Code Changes in Product BE"
          #     fi
          #   name: checkFolderBackendProduct
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/nuclios-server") -eq 0 ]; then
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
                echo "No code changes in Product BE"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Product BE"
              fi
            name: checkFolderBackendProductfast
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/background-functions") -eq 0 ]; then
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
                echo "No code changes in Background Jobs"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Background Jobs"
              fi
            name: checkFolderBgJobs
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/minerva-wc") -eq 0 ]; then
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
                echo "No code changes in Minerva WC"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Minerva WC"
              fi
            name: checkFolderMinervaWC
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/minerva") -eq 0 ]; then
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
                echo "No code changes in Minerva "
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Minerva "
              fi
            name: checkFolderMinerva

      # - job: Platform_UI
      #   pool:
      #     vmImage: "ubuntu-latest"
      #   variables:
      #     folderVar: $[dependencies.check_folder.outputs['checkFolderFrontendPlatform.RunJob']]
      #   dependsOn: check_folder
      #   condition: eq(variables.folderVar, true)
      #   steps:
      #     - script: |
      #         cd docker/services/client
      #         rm -rf .env
      #         echo 'NODE_PATH='$(CODEX_PLATFORM_NODE_PATH) | cat > .env
      #         echo 'REACT_APP_BACKEND_API='$(CODEX_PLATFORM_APP_BACKEND_API) | cat >> .env
      #         echo 'REACT_APP_MLFLOW_API='$(CODEX_PLATFORM_APP_MLFLOW_API)| cat >> .env
      #         echo 'REACT_APP_JUPYTER_DEMO_URL='$(CODEX_PLATFORM_APP_JUPYTER_DEMO_URL)| cat >> .env
      #         echo 'REACT_APP_JUPYTER_DEMO_TOKEN='$(ReactAppJupyterDemoToken)| cat >> .env
      #         echo 'REACT_APP_ENV='$(CODEX_PLATFORM_APP_ENV)| cat >> .env
      #         echo 'REACT_APP_PRODUCT_URL='"$(CODEX_PLATFORM_APP_PRODUCT_URL)<app_id>"| cat >> .env
      #         echo 'INLINE_RUNTIME_CHUNK='$(CODEX_PLATFORM_INLINE_RUNTIME_CHUNK)| cat >> .env
      #         echo 'GENERATE_SOURCEMAP'=$(CODEX_PLATFORM_GENERATE_SOURCEMAP)| cat >> .env
      #         echo 'REACT_APP_ENABLE_SENTRY='"'$(REACT_APP_ENABLE_SENTRY)'"| cat >> .env
      #         cat .env
      #         cd ../../..
      #       displayName: "Create ENV file"
      #       condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      #     - task: Docker@2
      #       inputs:
      #         containerRegistry: "Azure-CR"
      #         repository: "nuclios-platform-ui-dev"
      #         command: "buildAndPush"
      #         Dockerfile: "docker/services/client/Dockerfile"
      #         tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
      #       displayName: "Build & Push Platform-FE Image to ACR"
      #       condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      #     - task: AzureAppServiceManage@0
      #       inputs:
      #         azureSubscription: "MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)"
      #         Action: "Restart Azure App Service"
      #         WebAppName: "nuclios-platform-ui-dev"
      - job: build_global_style_webComponent
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderGlobalStyle.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: npmAuthenticate@0
            inputs:
              workingFile: '$(System.DefaultWorkingDirectory)/docker/services/global-style/.npmrc'
            displayName: 'Authenticate global-style npm to Feed'

          - script: |
              cd docker/services/global-style
              npm install --legacy-peer-deps
              npm run build
            displayName: 'Build global-style Web Component'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'docker/services/global-style/dist'  # Path to your dist folder
              artifactName: 'global-style-dist'  # Name the artifact
              publishLocation: 'pipeline'

          - script: |
              cd docker/services/global-style
              npm publish --userconfig npmrc
            displayName: 'Publish global-style to Azure Artifacts'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

      - job: build_solution_blueprint_webComponent
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderSolutionBlueprint.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: npmAuthenticate@0
            inputs:
              workingFile: '$(System.DefaultWorkingDirectory)/docker/services/nuclios-workbench/web-components/solution-blueprint/.npmrc'
            displayName: 'Authenticate solution-blueprint npm to Feed'

          - script: |
              cd docker/services/nuclios-workbench/web-components/solution-blueprint
              npm install --legacy-peer-deps
              npm run build
            displayName: 'Build solution-blueprint Web Component'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'docker/services/nuclios-workbench/web-components/solution-blueprint/dist'  # Path to your dist folder
              artifactName: 'solution-blueprint-dist'  # Name the artifact
              publishLocation: 'pipeline'

          - script: |
              cd docker/services/nuclios-workbench/web-components/solution-blueprint
              npm publish --userconfig .npmrc
            displayName: 'Publish solution-blueprint to Azure Artifacts'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

      - job: Product_UI
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderFrontendProduct.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              cd docker/services/product-client
              rm -rf .env
              echo 'NODE_PATH='$(CODEX_PRODUCT_NODE_PATH) | cat > .env
              echo 'REACT_APP_BACKEND_API='$(CODEX_PRODUCT_APP_BACKEND_API) | cat >> .env
              echo 'REACT_APP_PLATFORM_BACKEND_API='$(CODEX_PRODUCT_APP_PLATFORM_BACKEND_API)| cat >> .env
              echo 'REACT_APP_SOCKET_IO='$(CODEX_PRODUCT_APP_SOCKET_IO)| cat >> .env
              echo 'REACT_APP_GENAI='$(REACT_APP_GENAI)| cat >> .env
              echo 'REACT_APP_PLATFORM_SOCKET_IO='$(CODEX_PRODUCT_APP_PLATFORM_SOCKET_IO)| cat >> .env
              echo 'REACT_APP_PLATFORM='$(CODEX_PRODUCT_APP_PLATFORM)| cat >> .env
              echo 'REACT_APP_ENV='$(CODEX_PRODUCT_APP_ENV)| cat >> .env
              echo 'REACT_APP_SERVERLESS_API='$(CODEX_PRODUCT_APP_SERVERLESS_API)| cat >> .env
              echo 'REACT_APP_JUPYTER_DEMO_URL='$(CODEX_PRODUCT_APP_JUPYTER_DEMO_URL)| cat >> .env
              echo 'REACT_APP_JUPYTER_DEMO_TOKEN='$(ReactAppJupyterDemoToken)| cat >> .env
              echo 'REACT_APP_VERSION='$(CodexProductAppVersion)| cat >> .env
              echo 'REACT_APP_MATOMO_SITE_ID='$(CODEX_PRODUCT_APP_MATOMO_SITE_ID)| cat >> .env
              echo 'REACT_APP_MATOMO_SITE_URL='$(CODEX_PRODUCT_APP_MATOMO_SITE_URL)| cat >> .env
              echo 'REACT_APP_MATOMO_TOKEN='"'$(ReactAppMatomoToken)'"| cat >> .env
              echo 'INLINE_RUNTIME_CHUNK='$(CODEX_PRODUCT_INLINE_RUNTIME_CHUNK)| cat >> .env
              echo 'REACT_APP_MINERVA_BACKEND_URL='$(CODEX_PRODUCT_APP_MINERVA_BACKEND_URL)| cat >> .env
              echo 'SKIP_PREFLIGHT_CHECK='$(CODEX_PRODUCT_SKIP_PREFLIGHT_CHECK)| cat >> .env
              echo 'REACT_APP_STATIC_DATA_ASSET='$(CODEX_PRODUCT_APP_STATIC_DATA_ASSET)| cat >> .env
              echo 'REACT_APP_APPLICATIONINSIGHTS_CONNECTION_STRING='"'$(ReactAppApplicationInsightsConnectionString)'" | cat >> .env
              echo 'GENERATE_SOURCEMAP'=$(CODEX_PRODUCT_GENERATE_SOURCEMAP)| cat >> .env
              echo 'REACT_APP_GOOGLE_MAPS_KEY='"'$(ReactAppGoogleMapsKey)'"| cat >> .env
              echo 'REACT_APP_ENABLE_MINERVA='$(CODEX_PRODUCT_ENABLE_MINERVA)| cat >> .env
              echo 'REACT_APP_ENABLE_COPILOT='$(CODEX_PRODUCT_ENABLE_COPILOT)| cat >> .env
              echo 'REACT_APP_MINERVA_SOCKET_IO='$(CODEX_PRODUCT_MINERVA_SOCKET_IO)| cat >> .env
              echo 'REACT_APP_MINERVA_WC_HOST_URL='$(CODEX_PRODUCT_MINERVA_WC_HOST_URL)| cat >> .env
              echo 'REACT_APP_ENABLE_LLMWORKBENCH='$(REACT_APP_ENABLE_LLMWORKBENCH)| cat >> .env
              echo 'REACT_APP_GENAI_COOKBOOK_URL='"'$(REACTAPPGENAICOOKBOOKURL)'"| cat >> .env
              echo 'REACT_APP_GENAI_APPROVAL_USERS='"'$(GENAIAPPROVALUSERS)'"| cat >> .env
              echo 'REACT_APP_ENABLE_SENTRY='"'$(REACT_APP_ENABLE_SENTRY)'"| cat >> .env
              echo 'REACT_APP_ENABLE_APP_INSIGHTS='"'$(REACT_APP_ENABLE_APP_INSIGHTS)'"| cat >> .env
              echo 'REACT_APP_NUCLIOS_BACKEND_API='"'$(CODEX_APP_NUCLIOS_BACKEND_API)'"| cat >> .env
              echo 'REACT_APP_JPHUB_URL='"'$(CODEX_APP_JPHUB_URL)'"| cat >> .env
              echo 'REACT_APP_DEE_ENV_ENABLED='$(REACT_APP_DEE_ENV_ENABLED)| cat >> .env
              echo 'REACT_APP_DEE_ENV_BASE_URL='"'$(REACT_APP_DEE_ENV_BASE_URL)'"| cat >> .env
              echo 'REACT_APP_COPILOT_ADMIN_CLIENT='"'$(CODEX_APP_COPILOT_ADMIN_CLIENT)'"| cat >> .env
              echo 'REACT_APP_ENABLE_FASTAPI='$(CODEX_PRODUCT_ENABLE_FASTAPI)| cat >> .env
              echo 'REACT_APP_COPILOT_TEST_API='$(CODEX_PRODUCT_APP_COPILOT_TEST_API)| cat >> .env
              echo 'REACT_APP_SOLUTION_BP_ENV_BASE_URL='"'$(REACT_APP_SOLUTION_BP_ENV_BASE_URL)'"| cat >> .env
              echo 'REACT_APP_JUPYTER_HUB_ENV_BASE_URL='"'$(REACT_APP_JUPYTER_HUB_ENV_BASE_URL)'"| cat >> .env
              echo 'REACT_APP_DS_STORE_ENV_BASE_URL='"'$(REACT_APP_DS_STORE_ENV_BASE_URL)'"| cat >> .env
              cat .env
              cd ../../..
            displayName: "Create Env file"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: npmAuthenticate@0
            inputs:
              workingFile: '$(System.DefaultWorkingDirectory)/docker/services/product-client/.npmrc'
            displayName: 'Authenticate solution-blueprint npm to Feed'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-product-ui-dev"
              command: "buildAndPush"
              Dockerfile: "docker/services/product-client/Dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Product-FE Image to ACR"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: "MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)"
              Action: "Restart Azure App Service"
              WebAppName: "nuclios-ui-dev"
      - job: Platform_API
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderBackendPlatform.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-platform-api-dev"
              command: "buildAndPush"
              Dockerfile: "docker/server.dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Platform-API Image to ACR"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: "MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)"
              Action: "Restart Azure App Service"
              WebAppName: "nuclios-papi-dev"

      # - job: Product_API
      #   pool:
      #     vmImage: "ubuntu-latest"
      #   variables:
      #     folderVar: $[dependencies.check_folder.outputs['checkFolderBackendProduct.RunJob']]
      #   dependsOn: check_folder
      #   condition: eq(variables.folderVar, true)
      #   steps:
      #     - task: Docker@2
      #       inputs:
      #         containerRegistry: "Azure-CR"
      #         repository: "nuclios-product-api-dev"
      #         command: "buildAndPush"
      #         Dockerfile: "docker/product.dockerfile"
      #         tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
      #       displayName: "Build & Push Product-API Image to ACR"
      #       condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      #     - task: AzureAppServiceManage@0
      #       inputs:
      #         azureSubscription: "MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)"
      #         Action: "Restart Azure App Service"
      #         WebAppName: "nuclios-api-dev"
      - job: Product_API_FAST
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderBackendProductfast.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/nuclios-server/cert
              cd docker/services/nuclios-server/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-fast-api"
              command: "buildAndPush"
              Dockerfile: "docker/productfast.dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Product-API Image to ACR"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: "MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)"
              Action: "Restart Azure App Service"
              WebAppName: "nuclios-fastapi-dev"
      - job: Minerva
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderMinerva.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "codex-minerva-backend-dev"
              command: "buildAndPush"
              Dockerfile: "docker/services/minerva/Dockerfile.testserver"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Minerva Image to ACR"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      - job: Minerva_test
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderMinerva.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "minerva-testserver"
              command: "buildAndPush"
              Dockerfile: "docker/services/minerva/Dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Minerva testserver Image to ACR"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      - job: BG_Functions
        pool:
          vmImage: ubuntu-latest
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderBgJobs.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.10"
          - bash: |
              cd docker/services/background-functions/codex-bgjobs
              pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
            displayName: "Create Background jobs server build"
          - script: |
              cd docker/services/background-functions/codex-bgjobs/QueueTrigger
              rm -rf config.py
              cp config_dev.py config.py
              rm -rf function.json
              cp function.dev.json function.json
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "docker/services/background-functions/codex-bgjobs"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-bgjob-dev.zip"
              replaceExistingArchive: true
            displayName: "Save build artifact"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-bgjob-dev.zip"
              ArtifactName: "job-server-build"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: AzureFunctionApp@1
            displayName: "Deploy Azure Function App"
            inputs:
              azureSubscription: "MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)"
              appType: functionAppLinux
              appName: "func-codx-bgjobs-dev"
              package: "$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-bgjob-dev.zip"

      - job: Minerva_WC
        pool:
          vmImage: "ubuntu-latest"
        variables:
          folderVar: $[dependencies.check_folder.outputs['checkFolderMinervaWC.RunJob']]
        dependsOn: check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18"
          - script: |
              cd docker/services/minerva-wc
              npm install --legacy-peer-deps --no-optional
              cd ../../..
          - script: |
              cd docker/services/minerva-wc
              rm -rf .env
              echo 'SERVER_URL='$(CODEX_PRODUCT_APP_MINERVA_BACKEND_URL)| cat >> .env
              echo 'MINERVA_VERSION='$(CODEX_MINERVA_WC_VERSION)| cat >> .env
              echo 'HOST_URL='$(CODEX_PRODUCT_MINERVA_WC_HOST_URL)| cat >> .env
              echo 'TEST_SERVER_URL='$(CODEX_PRODUCT_APP_COPILOT_TEST_API)| cat >> .env
              cat .env
              cd ../../..
            displayName: "Create .env file"
          - script: |
              set -e
              cd docker/services/minerva-wc
              rm -rf build
              npm run build
              ls
              cd ../../..
            displayName: "Build Minerva_WC"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(System.DefaultWorkingDirectory)/docker/services/minerva-wc/dist"
              ArtifactName: "minerva-web-component"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

  - stage: Generate_ConfigMaps
    dependsOn: []
    condition: always()
    jobs:
      - job: generate_genai_configMap
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureCLI@2
            displayName: Generate GenAI Config Map
            inputs:
              azureSubscription: 'MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "apiVersion: v1" >> genai-config-map.yaml
                echo "kind: ConfigMap" >>  genai-config-map.yaml
                echo "metadata:" >>  genai-config-map.yaml
                echo "  name: $(GENAI_CONFIGMAP_NAME)" >> genai-config-map.yaml
                echo "  namespace: $(DEPLOYMENT_NAMESPACE)" >> genai-config-map.yaml
                echo "data:" >>  genai-config-map.yaml
                echo "  ALLOWED_ORIGINS: $(GENAI_ALLOWED_ORIGINS)" >> genai-config-map.yaml
                echo "  FOLDER_PATH: $(FOLDER_PATH)" >> genai-config-map.yaml
                echo "  LLMWORKBENCH_DEPLOYMENT_IMAGE_URL: $(LLMWORKBENCH_DEPLOYMENT_IMAGE_URL)" >> genai-config-map.yaml
                echo "  LLMWORKBENCH_EVALUATION_IMAGE_URL: $(LLMWORKBENCH_EVALUATION_IMAGE_URL)" >> genai-config-map.yaml
                echo "  LLMWORKBENCH_FINETUNE_IMAGE_URL: $(LLMWORKBENCH_FINETUNE_IMAGE_URL)" >> genai-config-map.yaml
                echo "  LLMWORKBENCH_TRAINING_POOL: $(LLMWORKBENCH_TRAINING_POOL)" >> genai-config-map.yaml
                echo "  LLMWORKBENCH_UNTRAINED_EVALUATION_IMAGE_URL: $(LLMWORKBENCH_UNTRAINED_EVALUATION_IMAGE_URL)" >> genai-config-map.yaml
                echo "  ROOT_PATH: $(GENAI_ROOT_PATH)" >> genai-config-map.yaml
                echo "  HF_TOKEN: $(HF_TOKEN)" >> genai-config-map.yaml

                cat genai-config-map.yaml

          - task: PublishBuildArtifacts@1
            displayName: Publish GenAI Config MAP
            inputs:
              PathtoPublish: 'genai-config-map.yaml'
              ArtifactName: 'genai-config'

      - job: generate_dee_configMap
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureCLI@2
            displayName: Generate DEE Config Map
            inputs:
              azureSubscription: 'MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "apiVersion: v1" > dee-config-map.yaml
                echo "kind: ConfigMap" >> dee-config-map.yaml
                echo "metadata:" >> dee-config-map.yaml
                echo "  name: $(DEE_CONFIGMAP_NAME)" >> dee-config-map.yaml
                echo "  namespace: $(DEPLOYMENT_NAMESPACE)" >> dee-config-map.yaml
                echo "data:" >> dee-config-map.yaml
                echo "  ACCESS_TOKEN_EXPIRE_MINUTES: '$(ACCESS_TOKEN_EXPIRE_MINUTES)'" >> dee-config-map.yaml
                echo "  ACCOUNT_LOCKOUT_DURATION: '$(ACCOUNT_LOCKOUT_DURATION)'" >> dee-config-map.yaml
                echo "  ACR_NAME: $(ACR_NAME)" >> dee-config-map.yaml
                echo "  ACR_RG: $(ACR_RG)" >> dee-config-map.yaml
                echo "  ACR_URL: $(ACR_URL)" >> dee-config-map.yaml
                echo "  ALLOWED_HEADERS: $(DEE_ALLOWED_HEADERS)" >> dee-config-map.yaml
                echo "  ALLOWED_METHODS: $(DEE_ALLOWED_METHODS)" >> dee-config-map.yaml
                echo "  ALLOWED_ORIGINS: $(DEE_ALLOWED_ORIGINS)" >> dee-config-map.yaml
                echo "  API_VERSION: '$(API_VERSION)'" >> dee-config-map.yaml
                echo "  APP_MODE: $(APP_MODE)" >> dee-config-map.yaml
                echo "  APP_NAME: $(APP_NAME)" >> dee-config-map.yaml
                echo "  CERT_PATH: $(CERT_PATH)" >> dee-config-map.yaml
                echo "  CLUSTER_NAME: $(CLUSTER_NAME)" >> dee-config-map.yaml
                echo "  DEBUG: '$(DEBUG)'" >> dee-config-map.yaml
                echo "  DEPLOYMENT_NAMESPACE: $(DEPLOYMENT_NAMESPACE)" >> dee-config-map.yaml
                echo "  DOCS_URL: $(DOCS_URL)" >> dee-config-map.yaml
                echo "  FAILED_LOGIN_THRESHOLD: '$(FAILED_LOGIN_THRESHOLD)'" >> dee-config-map.yaml
                echo "  FOLDER_PATH: $(FOLDER_PATH)" >> dee-config-map.yaml
                echo "  GATEWAY_BASE_URL: $(GATEWAY_BASE_URL)" >> dee-config-map.yaml
                echo "  INGRESS_SERVER_NAME: $(INGRESS_SERVER_NAME)" >> dee-config-map.yaml
                echo "  JWT_ALGORITHM: $(JWT_ALGORITHM)" >> dee-config-map.yaml
                echo "  JWT_ENCODE_ISSUER: $(JWT_ENCODE_ISSUER)" >> dee-config-map.yaml
                echo "  KANIKO_SECRET_KEY_NAME: $(KANIKO_SECRET_KEY_NAME)" >> dee-config-map.yaml
                echo "  REFRESH_TOKEN_EXPIRE_MINUTES: '$(REFRESH_TOKEN_EXPIRE_MINUTES)'" >> dee-config-map.yaml
                echo "  RESOURCE_GROUP: $(RESOURCE_GROUP)" >> dee-config-map.yaml
                echo "  ROOT_PATH: $(DEE_ROOT_PATH)" >> dee-config-map.yaml
                echo "  INTERNAL_SERVICE_CONNECTION_ENABLED: '$(INTERNAL_SERVICE_CONNECTION_ENABLED)'" >> dee-config-map.yaml
                echo "  JPHUB_DEPLOYMENT_NAMESPACE: $(JPHUB_DEPLOYMENT_NAMESPACE)" >> dee-config-map.yaml
                echo "  DSSTORE_BACKEND_URI: $(DSSTORE_BACKEND_URI)" >> dee-config-map.yaml
                echo "  RUN_PENDING_ENVS: '$(RUN_PENDING_ENVS)'" >> dee-config-map.yaml
                cat dee-config-map.yaml

          - task: PublishBuildArtifacts@1
            displayName: Publish DEE Config Map
            inputs:
              PathtoPublish: 'dee-config-map.yaml'
              ArtifactName: 'dee-config'

      - job: generate_code_executor_configMap
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureCLI@2
            displayName: Generate Code Executor Config Map
            inputs:
              azureSubscription: 'MIcrosoft Azure - Math (7b97259b-ed1f-4ebf-80e0-40d9ed2f0d3f)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "apiVersion: v1" > code-executor-config-map.yaml
                echo "kind: ConfigMap" >> code-executor-config-map.yaml
                echo "metadata:" >> code-executor-config-map.yaml
                echo "  name: $(CODE_EXECUTOR_CONFIGMAP_NAME)" >> code-executor-config-map.yaml
                echo "  namespace: $(DEPLOYMENT_NAMESPACE)" >> code-executor-config-map.yaml
                echo "data:" >> code-executor-config-map.yaml
                echo "  ALLOWED_HEADERS: $(CODE_EXECUTOR_ALLOWED_HEADERS)" >> code-executor-config-map.yaml
                echo "  ALLOWED_METHODS: $(CODE_EXECUTOR_ALLOWED_METHODS)" >> code-executor-config-map.yaml
                echo "  ALLOWED_ORIGINS: $(CODE_EXECUTOR_ALLOWED_ORIGINS)" >> code-executor-config-map.yaml
                echo "  ROOT_PATH: $(CODE_EXECUTOR_ROOT_PATH)" >> code-executor-config-map.yaml
                echo "  OPENAPI_URL: $(OPENAPI_URL)" >> code-executor-config-map.yaml
                cat code-executor-config-map.yaml

          - task: PublishBuildArtifacts@1
            displayName: Publish Code Executor Config Map
            inputs:
              PathtoPublish: 'code-executor-config-map.yaml'
              ArtifactName: 'code-executor-config'

  - stage: Build_Push_Image
    dependsOn: []
    condition: always()
    jobs:
      - job: check_folder_image
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
              https://login.microsoftonline.com/$(TenantId)/oauth2/token \
              -d 'client_id=$(ClientId)' \
              -d 'grant_type=client_credentials' \
              -d 'resource=https://management.core.windows.net/' \
              -d 'client_secret=$(ClientSecret)')
              echo $token
              access_token=$(echo $token | jq '.access_token')
              echo "##vso[task.setvariable variable=access_token]$access_token"
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/genai-server") -eq 0 ]; then
                echo "No code changes in GenAI Server"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in GenAI Server"
              fi
            name: checkFolderGenAIServer
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/genai-utils/inference") -eq 0 ]; then
                echo "No code changes in Inference Service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Inference Service"
              fi
            name: checkFolderInference
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/genai-utils/finetuning") -eq 0 ]; then
                echo "No code changes in Finetuning Service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Finetuning Service"
              fi
            name: checkFolderFinetuning

      - job: GenAI_Image_BuildPush_to_ACR
        variables:
          folderVar: $[dependencies.check_folder_image.outputs['checkFolderGenAIServer.RunJob']]
        dependsOn: check_folder_image
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/genai-server/cert
              cd docker/services/genai-server/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "genai-server"
              command: "buildAndPush"
              Dockerfile: "docker/services/genai-server/Dockerfile"
              tags: latest
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

      - job: Inference_Image_BuildPush_to_ACR
        variables:
          folderVar: $[dependencies.check_folder_image.outputs['checkFolderInference.RunJob']]
        dependsOn: check_folder_image
        condition: eq(variables.folderVar, true)
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: 'codex/codex_feed'
              onlyAddExtraIndex: true
            displayName: 'Authenticate Twine'

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "llmtuner-inference"
              command: "build"
              Dockerfile: "docker/services/genai-utils/inference/cuda.base.dockerfile"
              arguments: "--build-arg INDEX_URL=$(PIP_EXTRA_INDEX_URL)"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion),llama6
            displayName: "Build Inference Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "llmtuner-inference"
              command: "push"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion),llama6
            displayName: "Push Inference Image to ACR"
            # condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

      - job: LLMWORKBENCH_FINETUNE_BuildPush_to_ACR
        variables:
          folderVar: $[dependencies.check_folder_image.outputs['checkFolderFinetuning.RunJob']]
        dependsOn: check_folder_image
        condition: eq(variables.folderVar, true)
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: 'codex/codex_feed'
              onlyAddExtraIndex: true
            displayName: 'Authenticate Twine'

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-genai-finetuning-v7"
              command: "build"
              Dockerfile: "docker/services/genai-utils/finetuning/train.dockerfile"
              arguments: "--build-arg INDEX_URL=$(PIP_EXTRA_INDEX_URL)"
              tags: evaltrue
            displayName: "Build LLMWORKBENCH_FINETUNE Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-genai-finetuning-v7"
              command: "push"
              tags: evaltrue
            displayName: "Push LLMWORKBENCH_FINETUNE Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

      - job: LLMWORKBENCH_EVALUATION_Image_BuildPush_to_ACR
        variables:
          folderVar: $[dependencies.check_folder_image.outputs['checkFolderFinetuning.RunJob']]
        dependsOn: check_folder_image
        condition: eq(variables.folderVar, true)
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: 'codex/codex_feed'
              onlyAddExtraIndex: true
            displayName: 'Authenticate Twine'

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-genai-finetuning-eval"
              command: "build"
              Dockerfile: "docker/services/genai-utils/finetuning/eval.dockerfile"
              arguments: "--build-arg INDEX_URL=$(PIP_EXTRA_INDEX_URL)"
              tags: v1
            displayName: "Build LLMWORKBENCH_EVALUATION Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-genai-finetuning-eval"
              command: "push"
              tags: v1
            displayName: "Push LLMWORKBENCH_EVALUATION Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

      - job: LLMWORKBENCH_UNTRAINED_EVALUATION_Image_BuildPush_to_ACR
        variables:
          folderVar: $[dependencies.check_folder_image.outputs['checkFolderFinetuning.RunJob']]
        dependsOn: check_folder_image
        condition: eq(variables.folderVar, true)
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: 'codex/codex_feed'
              onlyAddExtraIndex: true
            displayName: 'Authenticate Twine'

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-genai-finetuning-test-infer"
              command: "build"
              Dockerfile: "docker/services/genai-utils/finetuning/test_eval.dockerfile"
              arguments: "--build-arg INDEX_URL=$(PIP_EXTRA_INDEX_URL)"
              tags: v2
            displayName: "Build LLMWORKBENCH_UNTRAINED_EVALUATION Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-genai-finetuning-test-infer"
              command: "push"
              tags: v2
            displayName: "Push LLMWORKBENCH_UNTRAINED_EVALUATION Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

      - job: LLMWORKBENCH_DEPLOYMENT_Image_BuildPush_to_ACR
        variables:
          folderVar: $[dependencies.check_folder_image.outputs['checkFolderInference.RunJob']]
        dependsOn: check_folder_image
        condition: eq(variables.folderVar, true)
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: 'codex/codex_feed'
              onlyAddExtraIndex: true
            displayName: 'Authenticate Twine'

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "finetune-deployment"
              command: "build"
              Dockerfile: "docker/services/genai-utils/inference/finetune_deployment.dockerfile"
              arguments: "--build-arg INDEX_URL=$(PIP_EXTRA_INDEX_URL)"
              tags: v1
            displayName: "Build LLMWORKBENCH_DEPLOYMENT Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "finetune-deployment"
              command: "push"
              tags: v1
            displayName: "Push LLMWORKBENCH_DEPLOYMENT Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

  - stage: DEE_Build_Push_Image
    dependsOn: []
    condition: always()
    jobs:
      - job: dee_check_folder
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
              https://login.microsoftonline.com/$(TenantId)/oauth2/token \
              -d 'client_id=$(ClientId)' \
              -d 'grant_type=client_credentials' \
              -d 'resource=https://management.core.windows.net/' \
              -d 'client_secret=$(ClientSecret)')
              echo $token
              access_token=$(echo $token | jq '.access_token')
              echo "##vso[task.setvariable variable=access_token]$access_token"
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/dynamic-execution-environment") -eq 0 ]; then
                echo "No code changes in DEE"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in DEE"
              fi
            name: checkFolderDEE

      - job: DEE_Deployment_Image_BuildPush_to_ACR
        variables:
          folderVar: $[dependencies.dee_check_folder.outputs['checkFolderDEE.RunJob']]
        dependsOn: dee_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/dynamic-execution-environment/cert
              cd docker/services/dynamic-execution-environment/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "dynamic-execution-environment"
              command: "buildAndPush"
              Dockerfile: "docker/services/dynamic-execution-environment/Dockerfile"
              tags: latest
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

  - stage: Comments_Service
    dependsOn: []
    condition: succeeded()
    jobs:
      - job: comments_service_check_folder
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
              https://login.microsoftonline.com/$(TenantId)/oauth2/token \
              -d 'client_id=$(ClientId)' \
              -d 'grant_type=client_credentials' \
              -d 'resource=https://management.core.windows.net/' \
              -d 'client_secret=$(ClientSecret)')
              echo $token
              access_token=$(echo $token | jq '.access_token')
              echo "##vso[task.setvariable variable=access_token]$access_token"
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -E -c "/docker/services/comments-service|/docker/services/comments-wc|/docker/services/comments-testing") -eq 0 ]; then
                echo "No code changes in comments-service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in comments-service"
              fi
            name: checkFolderCommentsService

      - job: Comments_Service_Frontend
        variables:
          folderVar: $[dependencies.comments_service_check_folder.outputs['checkFolderCommentsService.RunJob']]
        dependsOn: comments_service_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              cd docker/services/comments-wc
              rm -rf dist/
              npm install
              npm run build
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: docker/services/comments-wc/dist/my-react-library.umd.js
              artifact: frontend_artifact

      - job: Comments_Service_Backend
        variables:
          folderVar: $[dependencies.comments_service_check_folder.outputs['checkFolderCommentsService.RunJob']]
        dependsOn:
          - comments_service_check_folder
          - Comments_Service_Frontend
        condition: eq(variables.folderVar, true)
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: frontend_artifact
              path: $(Pipeline.Workspace)/frontend_artifact

          - script: |
              mv $(Pipeline.Workspace)/frontend_artifact/my-react-library.umd.js docker/services/comments-service/api/web_componant_file/my-react-library.umd.js
            displayName: "Move the file to web_component_file folder"

          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "comments-service-backend-dev"
              command: "buildAndPush"
              Dockerfile: "docker/comments.dockerfile"
              tags: latest
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))

  - stage: Nuclios_WorkBench
    dependsOn: []
    condition: succeeded()
    jobs:
      - job: nuclios_workBench_check_folder
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
              https://login.microsoftonline.com/$(TenantId)/oauth2/token \
              -d 'client_id=$(ClientId)' \
              -d 'grant_type=client_credentials' \
              -d 'resource=https://management.core.windows.net/' \
              -d 'client_secret=$(ClientSecret)')
              echo $token
              access_token=$(echo $token | jq '.access_token')
              echo "##vso[task.setvariable variable=access_token]$access_token"
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/nuclios-workbench/backends/api-services/copilot") -eq 0 ]; then
                echo "No code changes in Copilot-service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Copilot-service"
              fi
            name: checkFolderCopilotService
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/nuclios-workbench/backends/api-services/ds-workbench/dsstore-backend") -eq 0 ]; then
                echo "No code changes in dsstore-backend-service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in dsstore-backend-service"
              fi
            name: checkFolderDSstoreBackendService
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/nuclios-workbench/backends/api-services/ds-workbench/jupyterhub") -eq 0 ]; then
                echo "No code changes in jupyterhub-service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in jupyterhub-service"
              fi
            name: checkFolderJupyterHubrService
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/nuclios-workbench/backends/api-services/dynamic-execution-environment") -eq 0 ]; then
                echo "No code changes in DEE-service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in DEE-service"
              fi
            name: checkFolderDEEService
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/nuclios-workbench/backends/api-services/solution-blueprint") -eq 0 ]; then
                echo "No code changes in solution-blueprint-service"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in solution-blueprint-service"
              fi
            name: checkFolderSolutionBlueprintService

      - job: Copilot_Service_Deployemnt
        variables:
          folderVar: $[dependencies.nuclios_workBench_check_folder.outputs['checkFolderCopilotService.RunJob']]
        dependsOn: nuclios_workBench_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/nuclios-workbench/backends/api-services/copilot/cert
              cd docker/services/nuclios-workbench/backends/api-services/copilot/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-workbench-copilot-dev"
              command: "buildAndPush"
              Dockerfile: "docker/services/nuclios-workbench/backends/api-services/copilot/Dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'docker/services/nuclios-workbench/backends/api-services/copilot/Dockerfile'  # Path to your dist folder
              artifactName: 'nuclios-workbench-copilot'  # Name the artifact
              publishLocation: 'pipeline'

      - job: dsstore_Backend_Deployemnt
        variables:
          folderVar: $[dependencies.nuclios_workBench_check_folder.outputs['checkFolderDSstoreBackendService.RunJob']]
        dependsOn: nuclios_workBench_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/nuclios-workbench/backends/api-services/ds-workbench/dsstore-backend/cert
              cd docker/services/nuclios-workbench/backends/api-services/ds-workbench/dsstore-backend/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-workbench-dsstore-backend-dev"
              command: "buildAndPush"
              Dockerfile: "docker/services/nuclios-workbench/backends/api-services/ds-workbench/dsstore-backend/Dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'docker/services/nuclios-workbench/backends/api-services/ds-workbench/dsstore-backend/Dockerfile'  # Path to your dist folder
              artifactName: 'nuclios-workbench-dsstore-backend'  # Name the artifact
              publishLocation: 'pipeline'

      - job: jupyterHub_Deployemnt
        variables:
          folderVar: $[dependencies.nuclios_workBench_check_folder.outputs['checkFolderJupyterHubrService.RunJob']]
        dependsOn: nuclios_workBench_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/nuclios-workbench/backends/api-services/ds-workbench/jupyterhub/cert
              cd docker/services/nuclios-workbench/backends/api-services/ds-workbench/jupyterhub/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-workbench-jupyterhub-dev"
              command: "buildAndPush"
              Dockerfile: "docker/services/nuclios-workbench/backends/api-services/ds-workbench/jupyterhub/Dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'docker/services/nuclios-workbench/backends/api-services/ds-workbench/jupyterhub/Dockerfile'  # Path to your dist folder
              artifactName: 'nuclios-workbench-jupyterhub'  # Name the artifact
              publishLocation: 'pipeline'

      - job: DEE_Deployemnt
        variables:
          folderVar: $[dependencies.nuclios_workBench_check_folder.outputs['checkFolderDEEService.RunJob']]
        dependsOn: nuclios_workBench_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/nuclios-workbench/backends/api-services/dynamic-execution-environment/cert
              cd docker/services/nuclios-workbench/backends/api-services/dynamic-execution-environment/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-workbench-dynamic-execution-environment-dev"
              command: "buildAndPush"
              Dockerfile: "docker/services/nuclios-workbench/backends/api-services/dynamic-execution-environment/Dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'docker/services/nuclios-workbench/backends/api-services/dynamic-execution-environment/Dockerfile'  # Path to your dist folder
              artifactName: 'nuclios-workbench-dynamic-execution-environment'  # Name the artifact
              publishLocation: 'pipeline'

      - job: solution_Blueprint_Deployemnt
        variables:
          folderVar: $[dependencies.nuclios_workBench_check_folder.outputs['checkFolderSolutionBlueprintService.RunJob']]
        dependsOn: nuclios_workBench_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/nuclios-workbench/backends/api-services/solution-blueprint/cert
              cd docker/services/nuclios-workbench/backends/api-services/solution-blueprint/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-workbench-solution-blueprint-dev"
              command: "buildAndPush"
              Dockerfile: "docker/services/nuclios-workbench/backends/api-services/solution-blueprint/Dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Image to ACR"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev'))
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'docker/services/nuclios-workbench/backends/api-services/solution-blueprint/Dockerfile'  # Path to your dist folder
              artifactName: 'nuclios-workbench-solution-blueprint'  # Name the artifact
              publishLocation: 'pipeline'

  - stage: Nuclios_Server_Worker
    dependsOn: []
    condition: succeeded()
    jobs:
      - job: nuclios_server_check_folder
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              token=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
              https://login.microsoftonline.com/$(TenantId)/oauth2/token \
              -d 'client_id=$(ClientId)' \
              -d 'grant_type=client_credentials' \
              -d 'resource=https://management.core.windows.net/' \
              -d 'client_secret=$(ClientSecret)')
              echo $token
              access_token=$(echo $token | jq '.access_token')
              echo "##vso[task.setvariable variable=access_token]$access_token"
          - script: |
              curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes
              if [ $(curl -H "Authorization: Bearer $(access_token)" https://dev.azure.com/mathco-products/codex/_apis/git/repositories/9f11d7b0-5ce5-4b32-b527-135bdf364c1f/commits/$(Build.SourceVersion)/changes | grep -c "/docker/services/nuclios-server") -eq 0 ]; then
                echo "No code changes in Nuclios-Server"
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]false"
              else
                echo "##vso[task.setvariable variable=RunJob;isoutput=true]true"
                echo "Code Changes in Nuclios-Server"
              fi
            name: checkFolderNucliosServer
      - job: Nuclios_Server_Worker_Deployemnt
        variables:
          folderVar: $[dependencies.nuclios_server_check_folder.outputs['checkFolderNucliosServer.RunJob']]
        dependsOn: nuclios_server_check_folder
        condition: eq(variables.folderVar, true)
        steps:
          - script: |
              mkdir docker/services/nuclios-server/cert
              cd docker/services/nuclios-server/cert
              echo "$(GenaiCertCombined)" > genai.crt
          - task: Docker@2
            inputs:
              containerRegistry: "Azure-CR"
              repository: "nuclios-server-worker-dev"
              command: "buildAndPush"
              Dockerfile: "docker/productfast.worker.dockerfile"
              tags: latest,$(Build.BuildNumber)-$(CodexProductAppVersion)
            displayName: "Build & Push Product-API Image to ACR"
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))